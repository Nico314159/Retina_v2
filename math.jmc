class Math {
    function sine() {
        // Bhaskara approximation
        $output = $input;
        $output -= 1800;
        $output %= 1800;
        $output -= 900;

        $output *= $output;
        $trig_0 = $output;
        $trig_0 += 3240000;
        $trig_0 /= SCALE;
        $output *= -4;
        $output += 3240000;
        $output /= $trig_0;

        $trig_0 = $input;
        $trig_0 %= 3600;
        if ($trig_0 >= 1800) $output *= -1;
    }
    function cosine() {
        // Bhaskara approximation
        $output = $input;
        $output -= 900;
        $output %= 1800;
        $output -= 900;

        $output *= $output;
        $trig_0 = $output;
        $trig_0 += 3240000;
        $trig_0 /= SCALE;
        $output *= -4;
        $output += 3240000;
        $output /= $trig_0;

        $trig_0 = $input;
        $trig_0 += 900;
        $trig_0 %= 3600;
        if ($trig_0 >= 1800) $output *= -1;
    }
    function gimbal_to_vec() {
        $input = $input_yaw;
        Math.sine();
        $output_vec3.X = $output;
        $output_vec3.X *= -1;
        Math.cosine();
        $output_vec3.Z = $output;

        $input = $input_pitch;
        Math.cosine();
        $output_vec_horizontal = $output;
        $output_vec3.X *= $output;
        $output_vec3.Z *= $output;
        $output_vec3.X /= SCALE;
        $output_vec3.Z /= SCALE;
        Math.sine();
        $output_vec3.Y = $output;
        $output_vec3.Y *= -1;
    }
    function gimbal_to_matrix() {
        // Get sine and cosine values of yaw and pitch
        $input = $input_pitch;
        Math.sine();
        $sin_X = $output;
        Math.cosine();
        $cos_X = $output;

        $input = $input_yaw;
        Math.sine();
        $sin_Y = $output;
        Math.cosine();
        $cos_Y = $output;

        // Compute vectors of matrix
        $output_mat3.XX = $cos_Y;
        $output_mat3.XY = 0;
        $output_mat3.XZ = $sin_Y;

        $output_mat3.YX = $sin_Y;
        $output_mat3.YX *= $sin_X;
        $output_mat3.YX *= -1;
        $output_mat3.YX /= SCALE;
        $output_mat3.YY = $cos_X;
        $output_mat3.YZ = $cos_Y;
        $output_mat3.YZ *= $sin_X;
        $output_mat3.YZ /= SCALE;

        $output_mat3.ZX = $sin_Y;
        $output_mat3.ZX *= $cos_X;
        $output_mat3.ZX *= -1;
        $output_mat3.ZX /= SCALE;
        $output_mat3.ZY = $sin_X;
        $output_mat3.ZY *= -1;
        $output_mat3.ZZ = $cos_Y;
        $output_mat3.ZZ *= $cos_X;
        $output_mat3.ZZ /= SCALE;
    }
    function matrix_transform() {
        // Perform linear transformation
        $mat3_column_0 = $input_mat3.XX;
        $mat3_column_1 = $input_mat3.YX;
        $mat3_column_2 = $input_mat3.ZX;
        $mat3_column_0 *= $input_vec3.X;
        $mat3_column_1 *= $input_vec3.Y;
        $mat3_column_2 *= $input_vec3.Z;
        $output_vec3.X = $mat3_column_0;
        $output_vec3.X += $mat3_column_1;
        $output_vec3.X += $mat3_column_2;
        $output_vec3.X /= SCALE;

        $mat3_column_0 = $input_mat3.XY;
        $mat3_column_1 = $input_mat3.YY;
        $mat3_column_2 = $input_mat3.ZY;
        $mat3_column_0 *= $input_vec3.X;
        $mat3_column_1 *= $input_vec3.Y;
        $mat3_column_2 *= $input_vec3.Z;
        $output_vec3.Y = $mat3_column_0;
        $output_vec3.Y += $mat3_column_1;
        $output_vec3.Y += $mat3_column_2;
        $output_vec3.Y /= SCALE;

        $mat3_column_0 = $input_mat3.XZ;
        $mat3_column_1 = $input_mat3.YZ;
        $mat3_column_2 = $input_mat3.ZZ;
        $mat3_column_0 *= $input_vec3.X;
        $mat3_column_1 *= $input_vec3.Y;
        $mat3_column_2 *= $input_vec3.Z;
        $output_vec3.Z = $mat3_column_0;
        $output_vec3.Z += $mat3_column_1;
        $output_vec3.Z += $mat3_column_2;
        $output_vec3.Z /= SCALE;
    }

    class Sway_Heave_Surge {
        function find() {
            $input_vec3.X = $i;
            $input_vec3.X *= 2;
            $input_vec3.X += 10;
            $input_vec3.X -= $horizontal_count;
            if ($horizontal_count == 10) {
                $input_vec3.X = execute run random value 2..6;
                $input_vec3.X %= 3;
                $input_vec3.X --;
                $input_vec3.X *= 20;
            }
            $spread = Math.random($spread_least, $spread_most);
            $input_vec3.X *= $spread;
            $input_vec3.X /= 100;

            $input_vec3.Y = $j;
            $input_vec3.Y *= 2;
            $input_vec3.Y += 10;
            $input_vec3.Y -= $vertical_count;
            if ($vertical_count == 10) {
                $input_vec3.Y = execute run random value 2..6;
                $input_vec3.Y %= 3;
                $input_vec3.Y --;
                $input_vec3.Y *= 20;
            }
            $spread = Math.random($spread_least, $spread_most);
            $input_vec3.Y *= $spread;
            $input_vec3.Y /= 100;

            $input_vec3.Z = 500;
            if ($debug_messages) Text.tellraw(@a, "Input Vector: &<red, italic>[&<$input_vec3.X, italic>, &<$input_vec3.Y, italic>, &<$input_vec3.Z, italic>]"); 
        }
        function apply() {
            $length = 0;
            Hardcode.repeatList("[axis]", () => {$temp = $input_vec3.[axis]; $temp *= $input_vec3.[axis]; $length += $temp;}, ["X", "Y", "Z"]);
            $length = Math.sqrt($length);
            Hardcode.repeatList("[pair]", () => {$input_mat3.[pair] = $output_mat3.[pair];}, ["XX", "XY", "XZ", "YX", "YY", "YZ", "ZX", "ZY", "ZZ"]);
            Math.matrix_transform();
            Hardcode.repeatList("[axis]", () => {$output_vec3.[axis] *= SCALE; $output_vec3.[axis] /= $length;}, ["X", "Y", "Z"]);
            if ($debug_messages) Text.tellraw(@a, "Angled Vector: &<gold, italic>[&<$output_vec3.X, italic>, &<$output_vec3.Y, italic>, &<$output_vec3.Z, italic>]");
        }
    }
}